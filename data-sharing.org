#+TITLE: Expanding Molecular Simulation Use by Data/Code Sharing in Scientific Publishing
#+options: tags:nil toc:nil
#+latex_header: \usepackage{attachfile}
#+latex_header: \usepackage{tcolorbox}
\maketitle
\tableofcontents
[[elisp:(progn (org-show-mode)(org-show-start-slideshow))]]

* Title slide                                                         :slide:
#+BEGIN_SRC emacs-lisp-slide :exports none
(org-show-animate '("Expanding Molecular Simulation Use "
"by Data/Code Sharing in Scientific Publishing" "November, 16, 2016" "John Kitchin"
 "Carnegie Mellon University" "Chemical Engineering"))
#+END_SRC

* Molecular simulation has many parts                                 :slide:

- Science and engineering

- Code
  - Simulation and analysis

- Data
  - Raw, derived

- Effective communication of all three elements is required for it to have impact

If our goal is expanding the use of molecular simulation, we need to make it easier to learn how to do it.

We are a limited resource
  - We have tremendous knowledge in our minds that is difficult to get to
  - It is not easy to see how we do our work

Publications, in contrast, are much more accessible and can be a great starting point to learn from
  - But there is much room for improvement
  - There are limited tools that enable effective communication without tremendous effort

* Data/code sharing is not easy                                       :slide:

- But it is increasingly required by federal regulations for federally funded research

- And increasingly desired by the scientific community

            The big question is: "How do we make that happen?"

- Nobody wants more work

- We would all like to get more out of what we already do

- We have to think about making what we do today easier for us to do again tomorrow

- We are working on tools that make that happen that I will talk about today

- I will promote the idea that we need new tools, and new ways to do our work

  - I will show by example what becomes possible with these in terms of data/code sharing

* Why is data sharing hard today?                                     :slide:
- For many scientific authors data and analysis are not integrated into writing tools

  - Think about a manuscript in MS Word/LaTeX/Overleaf/Authorea/...
  - Bibliography in some file (Endnote, Bibtex, Mendeley, Zotero, ...)
  - Data in Excel, text/binary files,...
  - Plots in Origin/SigmaPlot/Matlab/Python/Excel/etc.
  - Separate script files for analysis
  - all with limited interconnectivity

     - e.g. where is the data in Fig 2 of the manuscript?
     - How do I reuse the data in Figure/Table 2 for a new purpose? Copy and Paste?

- These tools are not especially well-integrated and not easily adapted to new use cases

- Github, bitbucket, Zenodo, figshare, etc. make it easier than ever to put code/data out there
  - but without the codes and analysis that was used, it is harder to figure out than it needs to be

- It is the combination of science, code and data that we need to understand what the research is about.


* We built new tools to make it possible                              :slide:

- We developed an integrated set of tools that makes data/code/analysis part of the manuscript preparation/submission process

- They leverage the work we already do in scientific writing and provide access to reusable data/code

- This required development of a new tool chain for writing (both narrative text and code)

- It required thinking about how to do the the research in an intrinsically reproducible and sharable way

- Our approach is: First make it helpful to you, then make it is useful to others.

- We have done this in Emacs + org-mode + code

- It is all open-source (http://github.com/jkitchin/scimax) and cross-platform


* Emacs + org-mode for reproducible, functional scientific documents  :slide:
- org-mode is basically a plain text markup language deeply integrated into Emacs (an editor)

- Outline mode at the core, and much much more

** sub-heading
- Fancy bold, italic, colored text, big and little fonts, Comic Sans, notes

- Narrative text, equations \(\int_0^1 e^x dx\), 

#+attr_org: :width 100%
#+name: emoji
  [[./scientist.png]]

*** sub-sub-heading

Functional tables
#+name: data
| a | b |
|---+---|
| 0 | 1 |
| 2 | 4 |
| 3 | 4 |


- Functional links that can
  - Open document locations  file:scientist.png
  - Open mail, news, urls

- citations cite:kitchin-2015-examp ref:emoji  ref:data 

- Run user-defined code in almost any language
  - The output of one block can be the input to another

#+name: c-block
#+BEGIN_SRC C
#include <time.h>
#include <stdlib.h>
#include <stdio.h>

int main() {
    time_t current_time;
    char* c_time_string;
    current_time = time(NULL);
    /* Convert to local time format. */
    c_time_string = ctime(&current_time);
    printf("%s", c_time_string);
    return 0;
}
#+END_SRC


#+name: python-block
#+BEGIN_SRC python :results output org drawer :var data=c-block
print('c-block was last run on {}'.format(data))
#+END_SRC

#+BEGIN_SRC sh :var data=python-block
echo "python block output: " $data
#+END_SRC

This is just a fraction of its capability!

* We use it extensively in scientific publishing                      :slide:
  :PROPERTIES:
  :ID:       5F302B30-2BC8-4599-BB4B-614E9159EC69
  :END:
- [[../../../../../../../vc/techela/techela-admin/s16-06640/course/dft-book/dft.org::9288][Modeling materials with density functional theory]]
- [[../../../../../../books/pycse/pycse.org::5610][PYCSE]]
- 15 papers and growing in print by my group illustrating what can be done with this approach

- cite:hallenbeck-2013-effec-o2 - all experimental
- cite:miller-2014-simul-temper - mixed experiment/computation
- cite:xu-2014-relat - computational DFT on oxides
- cite:xu-2014-probin-cover - computational coverage/site dependence
- cite:curnan-2014-effec-concen - full sql database described in SI
- cite:boes-2015-estim-bulk - exp/computation H_{2}/D_{2} exchange on CuPd
- cite:boes-2015-core-cu - exp/computation XPS on CuPd alloys
- cite:xu-2015-linear-respon - 1.8 GB dataset on Zenodo
- cite:xu-2015-accur-u - computation DFT+U
- cite:kitchin-2015-data-surfac-scien - examples of reusing data
- cite:kitchin-2015-examp - examples of reusing data
- cite:thirumalai-2015-pt-pd - van der Waals coverage dependence
- cite:boes-2016-neural-networ - Molecular simulation via machine learning
- cite:kitchin-2016-autom-data - Automating data sharing

Let's see a working example
- cite:mehta-2015-ident-poten The data is available in the SI

- The json database is described in SI

 file:am4059149_si_001.pdf (see Table 2 page 13)

- The source can be extracted from the PDF 
#+BEGIN_SRC sh :results silent
pdftk am4059149_si_001.pdf  unpack_files
#+END_SRC

That SI file was generated from this file:
file:supporting-information.org::336

* Reusing the data                                                    :slide:
That data is human readable - and machine addressable

We can extract and reuse the data from the original document.

#+BEGIN_SRC emacs-lisp :var data=supporting-information.org:TiO2-data
(remove-if-not (lambda (x) (string= "LDA" (nth 2 x))) data)
#+END_SRC


If you prefer Python, no problem. Here we get the anatase data:

#+BEGIN_SRC python :var data=supporting-information.org:TiO2-data :results value
return [x for x in data if x[1] == 'anatase']
#+END_SRC

We can do analysis in our document, and control what gets exported!

#+BEGIN_SRC python :results output org drawer :exports results
import pycse.orgmode as org
import json
import matplotlib.pyplot as plt
from ase.utils.eos import EquationOfState
with open('supporting-information.json', 'r') as f:
    d = json.loads(f.read())

BO2 = 'VO2'
polymorph = 'pyrite'
xc = 'LDA'

volumes = [entry['data']['volume'] for entry in
	   d[BO2][polymorph][xc]['EOS']['calculations']]
energies =  [entry['data']['total_energy'] for entry in
	     d[BO2][polymorph][xc]['EOS']['calculations']]

# Plotting EOS
plt.plot(volumes, energies)
plt.xlabel('Volume (Ã…$^3$)')
plt.ylabel('Energy (eV)')
org.figure(plt.savefig('eos.png'), caption='VO2 pyrite EOS for the LDA functional.')
#+END_SRC


** export                                                          :noexport:
[[elisp:(browse-url (let ((org-export-babel-evaluate t)) (org-html-export-to-html)))]]


* But I do not use Emacs ;(                                           :slide:

Its ok. There is still time to change ;)

org-mode has a syntax that can be parsed to a data tree, and transformed by other languages.

There are growing APIs that allow you to use command line tools to extract data in the language of your choice.

Emacs is the most developed, with over a decade of efforts by hundreds of people. Emacs is 40+ years old with a substantial number of developer-years behind it.

Here is an example of data in an org-file.

#+name: elbonian-random-data
| 3 |
| 3 |
| 3 |
| 3 |
| 3 |

We can open a shell: elisp:bash and run a command-line utility to extract the data.
 
#+BEGIN_SRC sh
./py_org_table.py data-sharing.org elbonian-random-data
#+END_SRC

Alternatively, you can write a Python script to do this.

#+BEGIN_SRC python :results output org drawer
from py_org_table import *
import pycse.orgmode as org
import matplotlib.pyplot as plt

data = read_org_table('data-sharing.org', 'elbonian-random-data')
plt.plot(data, 'bo-')
plt.xlabel('index')
plt.ylabel('rnd')
plt.title("That's the trouble with random. You just never know.")
org.figure(plt.savefig('elbonian-random.png'))
#+END_SRC


* What makes this integration possible?                               :slide:
- An extensible editor
  - Extensible in a full programming language (Emacs-lisp)
  - This allows the tool to become what you want and what you need
  - Emacs is ideal for this

- A lightweight markup language
  - to differentiate text, code, data
  - Org-mode is also ideal for this
    - Part structured markup, part api
    - Very good compromise on function and utility with authoring ease
    - functional text

- </code>
  Since we use code to generate and analyse data, this solution works especially well



* Getting started                                                     :slide:
Source code:  http://github.com/jkitchin/scimax

Our starter-kit for Emacs + org-mode configured to do the things I showed you today
Should work out of the box on Windows. Directions for using it on Mac/Linux.

Kitchingroup blog: http://kitchingroup.cheme.cmu.edu

@johnkitchin [[./tweet-org-ref.png]]

Check out our YouTube channel: https://www.youtube.com/user/jrkitchin



#+attr_org: :width 600
[[./screenshots/date-16-11-2016-time-17-13-12.png]]

 views  (7000+ downloads of org-ref on MELPA!)




#+attr_org: :width 600
[[./screenshots/date-16-11-2016-time-17-13-49.png]]




#+attr_org: :width 600
[[./screenshots/date-16-11-2016-time-17-14-24.png]]



This talk: https://github.com/jkitchin/aiche-2016




* Concluding thoughts                                                 :slide:

- Emacs + org-mode + </code> enables a lot of very exciting capabilities in publishing and data/code sharing

  - Integrated and reusable narrative text, data, code

  - Export to a broad range of other formats

  - Interaction with the world (other computers, instruments) via APIs

    - Materials Project, translation to other languages, Internet of Things, ...

- This is a great tool for teaching, technical writing, electronic notebook, and many other things

- There is still work to do, but this has worked for us for many years now and we continue developing it

- [[elisp:(words-speak "Hello. My name is Lexy. When I can discover data and code in papers, I can learn from them. Then, we can work together to do exciting new things!")][Message from Lexy]]

- The future for molecular simulation and computational research is bright!

            
            Questions?

* Appendix



#  ov-highlight-data: ((11927%2011927%20(face%20(:slant%20italic)%20ov-highlight%20t))%20(11927%2011927%20(face%20(:weight%20bold)%20ov-highlight%20t))%20(11901%2011911%20(ov-highlight%20t%20face%20(:height%20405)))%20(11867%2011873%20(ov-highlight%20t%20face%20(:foreground%20"DarkOrange1")))%20(935%20958%20(ov-highlight%20t%20face%20(:foreground%20"DodgerBlue3")))%20(935%20958%20(ov-highlight%20t%20face%20(:weight%20bold)))%20(4041%204045%20(ov-highlight%20t%20face%20(:weight%20bold)))%20(4047%204053%20(ov-highlight%20t%20face%20(:slant%20italic)))%20(4055%204062%20(face%20(:background%20"Pink")%20ov-highlight%20t))%20(4063%204067%20(face%20(:foreground%20"IndianRed3")%20ov-highlight%20t))%20(4069%204072%20(face%20(:height%20306)%20ov-highlight%20t))%20(4077%204083%20(face%20(:height%2097)%20ov-highlight%20t))%20(4084%204089%20(face%20(:underline%20t)%20ov-highlight%20t))%20(4091%204101%20(face%20(:family%20"Comic%20Sans%20MS"%20:strike-through%20t%20:height%20306)%20ov-highlight%20t))%20(4103%204108%20(face%20(:background%20"Orange1")%20mouse-face%20highlight%20local-map%20(keymap%20(mouse-1%20lambda%20nil%20(interactive)%20(setq%20*ov-window-configuration*%20(current-window-configuration))%20(let%20((cb%20(current-buffer))%20(current-note%20(overlay-get%20(ov-at)%20(quote%20help-echo))))%20(switch-to-buffer%20"*ov-note*")%20(erase-buffer)%20(org-mode)%20(insert%20(or%20current-note%20""))%20(let%20((map%20(make-sparse-keymap)))%20(setq%20header-line-format%20"Click%20here%20or%20type%20s-<return>%20to%20finish.%20C-x%20k%20to%20cancel."))%20(local-set-key%20(kbd%20"C-x%20k")%20(\`%20(lambda%20nil%20(interactive)%20(kill-buffer))))%20(local-set-key%20(kbd%20"s-<return>")%20(\`%20(lambda%20nil%20(interactive)%20(let%20((tooltip%20(buffer-substring-no-properties%20(point-min)%20(point-max))))%20(kill-buffer)%20(set-window-configuration%20*ov-window-configuration*)%20(setq%20*ov-window-configuration*%20nil)%20(overlay-put%20(ov-at)%20(quote%20help-echo)%20tooltip))))))))%20help-echo%20"Do%20not%20use%20Comic%20Sans!"%20ov-highlight%20t))%20(4590%204590%20(face%20(:background%20"Orange1")%20mouse-face%20highlight%20local-map%20(keymap%20(mouse-1%20lambda%20nil%20(interactive)%20(setq%20*ov-window-configuration*%20(current-window-configuration))%20(let%20((cb%20(current-buffer))%20(current-note%20(overlay-get%20(ov-at)%20(quote%20help-echo))))%20(switch-to-buffer%20"*ov-note*")%20(erase-buffer)%20(org-mode)%20(insert%20(or%20current-note%20""))%20(let%20((map%20(make-sparse-keymap)))%20(setq%20header-line-format%20"Click%20here%20or%20type%20s-<return>%20to%20finish.%20C-x%20k%20to%20cancel."))%20(local-set-key%20(kbd%20"C-x%20k")%20(\`%20(lambda%20nil%20(interactive)%20(kill-buffer))))%20(local-set-key%20(kbd%20"s-<return>")%20(\`%20(lambda%20nil%20(interactive)%20(let%20((tooltip%20(buffer-substring-no-properties%20(point-min)%20(point-max))))%20(kill-buffer)%20(set-window-configuration%20*ov-window-configuration*)%20(setq%20*ov-window-configuration*%20nil)%20(overlay-put%20(ov-at)%20(quote%20help-echo)%20tooltip))))))))%20help-echo%20(lambda%20nil%20(interactive)%20(let%20((tooltip%20(buffer-substring-no-properties%20(point-min)%20(point-max))))%20(kill-buffer)%20(set-window-configuration%20*ov-window-configuration*)%20(setq%20*ov-window-configuration*%20nil)%20(overlay-put%20(ov-at)%20(quote%20help-echo)%20tooltip)))%20ov-highlight%20t))%20(5675%205687%20(ov-highlight%20t%20face%20(:box%20(:line-width%202%20:color%20"red"%20:style%20released-button))))%20(5728%205738%20(ov-highlight%20t%20face%20(:box%20(:line-width%202%20:color%20"red"%20:style%20released-button))))%20(5969%205972%20(ov-highlight%20t%20face%20(:box%20(:line-width%202%20:color%20"red"%20:style%20released-button))))%20(6041%206044%20(ov-highlight%20t%20face%20(:box%20(:line-width%202%20:color%20"red"%20:style%20released-button)))))

# Local Variables:
# eval: (ov-highlight-load)
# End:
